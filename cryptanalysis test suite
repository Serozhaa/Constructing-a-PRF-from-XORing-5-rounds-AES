Sbox = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
)
Sbox_inv = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
)
def create_ddt(function): #function=the cipher, for example Sbox[x]
    ddt = [[0] * 256 for _ in range(256)]

    for x in range(256):
        for input_diff in range(256):
            output_xor = function(x,input_diff)
            ddt[input_diff][output_xor] += 1

    return ddt

def create_ddt_over_all_keys(function): #function=the cipher, for example Sbox[x]
    ddt = [[0] * 256 for _ in range(256)]

    for input_diff in range(256):
        for x in range(256):
            for key in range(1, 256):
                for key_two in range(1, 256):
                    output_xor = function(x, input_diff, key, key_two)
                    ddt[input_diff][output_xor] += 1

    return ddt

from tabulate import tabulate


def display_ddt(ddt):
    headers = ["Output Difference"] + [f"{i:02X}" for i in range(256)]
    rows = [[f"{i:02X}"] + counts for i, counts in enumerate(ddt)]

    print(tabulate(rows, headers=headers))

def find_highest_values(ddt):
    values = []
    positions = []

    for row_index, row in enumerate(ddt):
        max_values = sorted(range(len(row)), key=lambda i: row[i], reverse=True)[:3]
        values.extend(row[i] for i in max_values)
        positions.extend((row_index, col_index) for col_index in max_values)

    return values, positions

def count_and_sort_values(ddt):
    value_counts = {}

    for row in ddt:
        for value in row:
            if value in value_counts:
                value_counts[value] += 1
            else:
                value_counts[value] = 1

    sorted_values = sorted(value_counts.items(), key=lambda x: x[1], reverse=True)

    return sorted_values

def sbox_enc(x, input_diff):
    key=22
    return Sbox[x^key]^Sbox[x^key^input_diff]

def sbox_dec(x, key):
    key=22
    return Sbox_inv[x^key]

def write_ddt_to_file(file_path, function):
    ddt = create_ddt(function)
    with open(file_path, 'w') as file:
        for row in ddt:
            line = ','.join(map(str, row))
            file.write(line + '\n')
write_ddt_to_file("sbox_with_key_ddt.txt", sbox_enc)

def count_and_sort_values_from_file(file_path):
    value_counts = {}

    with open(file_path, 'r') as file:
        lines = file.readlines()
        for line in lines:
            values = line.strip().split(',')
            for value in values:
                if value:
                    value = int(value)
                    if value in value_counts:
                        value_counts[value] += 1
                    else:
                        value_counts[value] = 1

    sorted_values = sorted(value_counts.items(), key=lambda x: x[1], reverse=True)

    return sorted_values

def sbox_with_key(x, input_diff, key, key_two):
    return (Sbox[x ^ key] ^ Sbox_inv[x ^ key_two]) ^ (Sbox[x ^ input_diff ^ key] ^ Sbox_inv[x ^ input_diff ^ key_two])


def sbox_with_given_key(x,input_diff):
    key=7
    key_two= 3
    return (Sbox[x ^ key] ^ Sbox_inv[x^ key_two]) ^ (Sbox[x ^ input_diff^key]^Sbox_inv[x^input_diff^ key_two])

import matplotlib.pyplot as plt
import numpy as np


def create_ddt_heatmap(ddt):
    fig, ax = plt.subplots()
    im = ax.imshow(ddt, cmap='hot')

    # Add colorbar
    cbar = ax.figure.colorbar(im, ax=ax)

    # Set tick labels and axes labels
    ax.set_xticks(np.arange(256))
    ax.set_yticks(np.arange(256))
    ax.set_xticklabels(np.arange(256))
    ax.set_yticklabels(np.arange(256))

    # Loop over data dimensions and create text annotations
    for i in range(256):
        for j in range(256):
            text = ax.text(j, i, ddt[i][j], ha="center", va="center", color="w")

    ax.set_title("Difference Distribution Table Heatmap")
    fig.tight_layout()
    plt.show()



def create_heatmap_from_file(file_path):
    # Daten aus der Textdatei laden
    with open(file_path, 'r') as file:
        lines = file.readlines()
        data = []
        for line in lines:
            # Ungültige Zeichen ignorieren und nur gültige Ganzzahlen verwenden
            values = [int(val) for val in line.strip().split(',') if val.strip().isdigit()]
            data.append(values)

    # Größe der Tabelle bestimmen
    num_rows = len(data)
    num_cols = len(data[0])

    # Höchsten Wert bestimmen
    max_value = np.max(data)

    # Spektrum der Heatmap anpassen
    vmax = min(max_value, 4)  # Maximalwert auf 4 begrenzen

    # Position [1][1] finden
    value = data[1][1]

    # Heatmap erstellen
    fig, ax = plt.subplots()
    im = ax.imshow(data, cmap='binary', vmin=0, vmax=vmax)
    plt.xlabel("Input differences ", weight="bold", size=24)
    plt.ylabel("Output differences", weight="bold", size=24)

    # Colorbar hinzufügen
    cbar = ax.figure.colorbar(im, ax=ax)

    # Textannotation für [1][1] hinzufügen
    text = ax.text(1, 1, f'Value: {value}', ha="center", va="center", color="w")

    #ax.set_title("Heatmap der Tabelle")
    fig.tight_layout()
    plt.show()


#write_ddt_to_file("simplified_prf_ddt.txt",sbox_with_given_key)
#print(count_and_sort_values_from_file("simplified_prf_ddt.txt"))
#create_heatmap_from_file("simplified_prf_ddt.txt")
write_ddt_to_file("aes_sbox_ddt",sbox_enc)
create_heatmap_from_file("aes_sbox_ddt")
